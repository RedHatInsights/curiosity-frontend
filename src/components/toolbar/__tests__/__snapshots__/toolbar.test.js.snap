// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Toolbar Component should handle updating toolbar chips: chips 1`] = `
<Toolbar
  className="curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="sm"
  id="curiosity-toolbar"
>
  <ToolbarContent
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={
        <FilterIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      }
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.category, {\\"context\\":\\"sla\\"})"
          chips={
            Array [
              "t(curiosity-toolbar.sla, {\\"context\\":\\"Premium\\"})",
            ]
          }
          deleteChip={[Function]}
          key="sla"
          showToolbarItem={true}
        >
          <ToolbarFieldSla
            isFilter={true}
            key="selectCategory_sla"
            options={
              Array [
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Premium\\"})",
                  "value": "Premium",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Standard\\"})",
                  "value": "Standard",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Self-Support\\"})",
                  "value": "Self-Support",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"none\\"})",
                  "value": "",
                },
              ]
            }
            t={[Function]}
            useOnSelect={[Function]}
            useProductQuery={[Function]}
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should hide categories when a single filter is available: single filter 1`] = `
<Toolbar
  className="curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="sm"
  id="curiosity-toolbar"
>
  <ToolbarContent
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={
        <FilterIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      }
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.category, {\\"context\\":\\"sla\\"})"
          chips={Array []}
          deleteChip={[Function]}
          key="sla"
          showToolbarItem={true}
        >
          <ToolbarFieldSla
            isFilter={true}
            key="selectCategory_sla"
            options={
              Array [
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Premium\\"})",
                  "value": "Premium",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Standard\\"})",
                  "value": "Standard",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Self-Support\\"})",
                  "value": "Self-Support",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"none\\"})",
                  "value": "",
                },
              ]
            }
            t={[Function]}
            useOnSelect={[Function]}
            useProductQuery={[Function]}
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should render a basic component: basic 1`] = `
<Toolbar
  className="curiosity-toolbar pf-m-toggle-group-container ins-c-primary-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="sm"
  id="curiosity-toolbar"
>
  <ToolbarContent
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={
        <FilterIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      }
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarItem>
          <ToolbarFieldSelectCategory
            t={[Function]}
            useOnSelect={[Function]}
            useSelectCategoryOptions={[Function]}
          />
        </ToolbarItem>
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.category, {\\"context\\":\\"sla\\"})"
          chips={Array []}
          deleteChip={[Function]}
          key="sla"
          showToolbarItem={false}
        >
          <ToolbarFieldSla
            isFilter={true}
            key="selectCategory_sla"
            options={
              Array [
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Premium\\"})",
                  "value": "Premium",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Standard\\"})",
                  "value": "Standard",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"Self-Support\\"})",
                  "value": "Self-Support",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.sla, {\\"context\\":\\"none\\"})",
                  "value": "",
                },
              ]
            }
            t={[Function]}
            useOnSelect={[Function]}
            useProductQuery={[Function]}
          />
        </ToolbarFilter>
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.category, {\\"context\\":\\"usage\\"})"
          chips={Array []}
          deleteChip={[Function]}
          key="usage"
          showToolbarItem={false}
        >
          <ToolbarFieldUsage
            isFilter={true}
            key="selectCategory_usage"
            options={
              Array [
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.usage, {\\"context\\":\\"Production\\"})",
                  "value": "Production",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.usage, {\\"context\\":\\"Development/Test\\"})",
                  "value": "Development/Test",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.usage, {\\"context\\":\\"Disaster Recovery\\"})",
                  "value": "Disaster Recovery",
                },
                Object {
                  "selected": false,
                  "title": "t(curiosity-toolbar.usage, {\\"context\\":\\"unspecified\\"})",
                  "value": "",
                },
              ]
            }
            t={[Function]}
            useOnSelect={[Function]}
            useProductQuery={[Function]}
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should return an empty render when disabled or missing filters: disabled component 1`] = `""`;

exports[`Toolbar Component should return an empty render when disabled or missing filters: missing filters 1`] = `""`;
