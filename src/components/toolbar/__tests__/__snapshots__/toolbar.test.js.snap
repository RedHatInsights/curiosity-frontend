// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Toolbar Component should handle displaying a group variant field: group variant, disabled 1`] = `
<Toolbar
  className="curiosity-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="md"
  id="curiosity-toolbar"
>
  <ToolbarContent
    className="curiosity-toolbar__content"
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={<FilterIcon />}
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.label_filter, {"context":"sla"})"
          deleteLabel={[Function]}
          labels={[]}
          showToolbarItem={true}
        >
          <Sla
            isFilter={true}
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
    <ForwardRef />
    <ForwardRef
      align={
        {
          "default": "alignEnd",
        }
      }
    >
      <span>
        lorem ipsum
      </span>
    </ForwardRef>
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should handle displaying a group variant field: group variant, standalone 1`] = `
<ToolbarFieldGroupVariant
  isStandalone={true}
/>
`;

exports[`Toolbar Component should handle displaying secondary components, fields: secondary 1`] = `
<Toolbar
  className="curiosity-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="md"
  id="curiosity-toolbar"
>
  <ToolbarFieldGroupVariant />
  <ToolbarContent
    className="curiosity-toolbar__content"
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={<FilterIcon />}
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.label_filter, {"context":"sla"})"
          deleteLabel={[Function]}
          labels={[]}
          showToolbarItem={true}
        >
          <Sla
            isFilter={true}
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
    <ForwardRef />
    <ForwardRef
      align={
        {
          "default": "alignEnd",
        }
      }
    >
      <span>
        lorem ipsum
      </span>
    </ForwardRef>
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should handle updating toolbar chips/labels: chips, not clearable 1`] = `null`;

exports[`Toolbar Component should handle updating toolbar chips/labels: chips/labels 1`] = `
<div
  class="pf-v6-c-label-group pf-m-category"
>
  <div
    class="pf-v6-c-label-group__main"
  >
    <span
      aria-hidden="true"
      class="pf-v6-c-label-group__label"
      id="pf-random-id-0"
    >
      t(curiosity-toolbar.label_filter, {"context":"sla"})
    </span>
    <ul
      aria-labelledby="pf-random-id-0"
      class="pf-v6-c-label-group__list"
      role="list"
    >
      <li
        class="pf-v6-c-label-group__list-item"
      >
        <span
          class="pf-v6-c-label pf-m-outline"
        >
          <span
            class="pf-v6-c-label__content"
          >
            <span
              class="pf-v6-c-label__text"
            >
              t(curiosity-toolbar.label_sla, {"context":"Premium","value":"Premium"})
            </span>
          </span>
          <span
            class="pf-v6-c-label__actions"
          >
            <button
              aria-label="Close t(curiosity-toolbar.label_sla, {"context":"Premium","value":"Premium"})"
              class="pf-v6-c-button pf-m-plain pf-m-no-padding"
              data-ouia-component-id="OUIA-Generated-Button-plain-2"
              data-ouia-component-type="PF6/Button"
              data-ouia-safe="true"
              type="button"
            >
              <span
                class="pf-v6-c-button__icon"
              >
                <svg
                  aria-hidden="true"
                  class="pf-v6-svg"
                  fill="currentColor"
                  height="1em"
                  role="img"
                  viewBox="0 0 352 512"
                  width="1em"
                >
                  <path
                    d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"
                  />
                </svg>
              </span>
            </button>
          </span>
        </span>
      </li>
    </ul>
  </div>
</div>
`;

exports[`Toolbar Component should hide categories when a single filter is available: single filter 1`] = `
<Toolbar
  className="curiosity-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="md"
  id="curiosity-toolbar"
>
  <ToolbarFieldGroupVariant />
  <ToolbarContent
    className="curiosity-toolbar__content"
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={<FilterIcon />}
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.label_filter, {"context":"sla"})"
          deleteLabel={[Function]}
          labels={[]}
          showToolbarItem={true}
        >
          <Sla
            isFilter={true}
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
    <ForwardRef />
    <ForwardRef
      align={
        {
          "default": "alignEnd",
        }
      }
    />
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should render a basic component: basic 1`] = `
<Toolbar
  className="curiosity-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="md"
  id="curiosity-toolbar"
>
  <ToolbarFieldGroupVariant />
  <ToolbarContent
    className="curiosity-toolbar__content"
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ToolbarToggleGroup
      breakpoint="md"
      toggleIcon={<FilterIcon />}
    >
      <ForwardRef
        variant="filter-group"
      >
        <ToolbarItem>
          <ToolbarFieldSelectCategory />
        </ToolbarItem>
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.label_filter, {"context":"sla"})"
          deleteLabel={[Function]}
          labels={[]}
          showToolbarItem={false}
        >
          <Sla
            isFilter={true}
          />
        </ToolbarFilter>
        <ToolbarFilter
          categoryName="t(curiosity-toolbar.label_filter, {"context":"usage"})"
          deleteLabel={[Function]}
          labels={[]}
          showToolbarItem={false}
        >
          <Usage
            isFilter={true}
          />
        </ToolbarFilter>
      </ForwardRef>
    </ToolbarToggleGroup>
    <ForwardRef />
    <ForwardRef
      align={
        {
          "default": "alignEnd",
        }
      }
    />
  </ToolbarContent>
</Toolbar>
`;

exports[`Toolbar Component should return an empty render, or variant filter, when disabled or missing filters: disabled component 1`] = `null`;

exports[`Toolbar Component should return an empty render, or variant filter, when disabled or missing filters: missing filters, has variant filter 1`] = `
<ToolbarFieldGroupVariant
  isStandalone={true}
/>
`;

exports[`Toolbar Component should return an empty render, or variant filter, when disabled or missing filters: missing primary, has secondary filters 1`] = `
<Toolbar
  className="curiosity-toolbar"
  clearAllFilters={[Function]}
  clearFiltersButtonText="t(curiosity-toolbar.clearFilters)"
  collapseListedFiltersBreakpoint="md"
  id="curiosity-toolbar"
>
  <ToolbarFieldGroupVariant />
  <ToolbarContent
    className="curiosity-toolbar__content"
    isExpanded={false}
    showClearFiltersButton={false}
  >
    <ForwardRef />
    <ForwardRef
      align={
        {
          "default": "alignEnd",
        }
      }
    >
      <span>
        lorem ipsum
      </span>
    </ForwardRef>
  </ToolbarContent>
</Toolbar>
`;
