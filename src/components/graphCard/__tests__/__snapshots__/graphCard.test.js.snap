// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphCard Component should allow being disabled: disabled 1`] = `""`;

exports[`GraphCard Component should render a basic component: basic 1`] = `
<Fragment>
  <ContextProvider
    value={
      {
        "settings": {
          "isStandalone": false,
          "metric": undefined,
          "metrics": [
            {
              "chartType": "area",
              "id": "Core-seconds",
              "isCapacity": false,
              "isStacked": true,
              "isStandalone": false,
              "isThreshold": false,
              "metric": "Core-seconds",
              "strokeWidth": 2,
            },
          ],
        },
      }
    }
  >
    <GraphCardChart
      t={[Function]}
      useGetMetrics={[Function]}
      useGraphCardContext={[Function]}
      useProduct={[Function]}
      useProductGraphTallyQuery={[Function]}
    />
  </ContextProvider>
</Fragment>
`;

exports[`GraphCard Component should setup basic settings: settings 1`] = `
<Fragment>
  <ContextProvider
    value={
      {
        "settings": {
          "isStandalone": false,
          "metric": undefined,
          "metrics": [
            {
              "chartType": "area",
              "id": "Core-seconds",
              "isCapacity": false,
              "isStacked": true,
              "isStandalone": false,
              "isThreshold": false,
              "metric": "Core-seconds",
              "strokeWidth": 2,
            },
          ],
        },
      }
    }
  >
    <GraphCardChart
      t={[Function]}
      useGetMetrics={[Function]}
      useGraphCardContext={[Function]}
      useProduct={[Function]}
      useProductGraphTallyQuery={[Function]}
    />
  </ContextProvider>
  <ContextProvider
    key="graphCard_Sockets"
    value={
      {
        "settings": {
          "isStandalone": true,
          "metric": {
            "chartType": "area",
            "id": "Sockets",
            "isCapacity": false,
            "isStacked": true,
            "isStandalone": true,
            "isThreshold": false,
            "metric": "Sockets",
            "strokeWidth": 2,
          },
          "metrics": [
            {
              "chartType": "area",
              "id": "Sockets",
              "isCapacity": false,
              "isStacked": true,
              "isStandalone": true,
              "isThreshold": false,
              "metric": "Sockets",
              "strokeWidth": 2,
            },
          ],
          "padding": {
            "bottom": 75,
            "left": 75,
            "right": 45,
            "top": 45,
          },
        },
      }
    }
  >
    <GraphCardMetricTotals
      t={[Function]}
      useMetricsSelector={[Function]}
      useProductGraphTallyQuery={[Function]}
    >
      <GraphCardChart
        t={[Function]}
        useGetMetrics={[Function]}
        useGraphCardContext={[Function]}
        useProduct={[Function]}
        useProductGraphTallyQuery={[Function]}
      />
    </GraphCardMetricTotals>
  </ContextProvider>
</Fragment>
`;
