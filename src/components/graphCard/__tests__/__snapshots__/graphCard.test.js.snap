// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphCard Component should filter result sets: filtered dataSets 1`] = `
Array [
  Object {
    "animate": Object {
      "duration": 250,
      "onLoad": Object {
        "duration": 250,
      },
    },
    "data": Array [
      Object {
        "date": 2019-06-01T00:00:00.000Z,
        "x": 0,
        "y": 10,
      },
      Object {
        "date": 2019-06-08T00:00:00.000Z,
        "x": 1,
        "y": 12,
      },
      Object {
        "date": 2019-06-25T00:00:00.000Z,
        "x": 2,
        "y": 3,
      },
    ],
    "id": "loremIpsumSockets",
    "isStacked": true,
    "isThreshold": false,
    "strokeWidth": 2,
  },
  Object {
    "animate": Object {
      "duration": 100,
      "onLoad": Object {
        "duration": 100,
      },
    },
    "data": Array [
      Object {
        "date": 2019-06-01T00:00:00.000Z,
        "x": 0,
        "y": 10,
      },
      Object {
        "date": 2019-06-08T00:00:00.000Z,
        "x": 1,
        "y": 12,
      },
      Object {
        "date": 2019-06-25T00:00:00.000Z,
        "x": 2,
        "y": 3,
      },
    ],
    "id": "thresholdLoremIpsumSockets",
    "isStacked": false,
    "isThreshold": true,
    "stroke": "#4cb140",
    "strokeDasharray": "4,3",
    "strokeWidth": 3,
  },
]
`;

exports[`GraphCard Component should render a non-connected component: non-connected 1`] = `
<Card
  className="curiosity-usage-graph"
>
  <MinHeight
    autoUpdate={false}
    key="headerMinHeight"
    minHeight={0}
  >
    <CardHeader>
      <CardTitle>
        <Title
          headingLevel="h2"
          size="lg"
        />
      </CardTitle>
      <CardActions
        className=""
      >
        <Select
          aria-label="t(curiosity-graph.dropdownPlaceholder)"
          ariaLabel="Select option"
          className=""
          id="generatedid-"
          isDisabled={false}
          isToggleText={true}
          name={null}
          onSelect={[Function]}
          options={
            Array [
              Object {
                "selected": true,
                "title": "t(curiosity-graph.dropdownDaily)",
                "value": "daily",
              },
              Object {
                "title": "t(curiosity-graph.dropdownWeekly)",
                "value": "weekly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownMonthly)",
                "value": "monthly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownQuarterly)",
                "value": "quarterly",
              },
            ]
          }
          placeholder="t(curiosity-graph.dropdownPlaceholder)"
          selectedOptions="daily"
          toggleIcon={null}
          variant="single"
        />
      </CardActions>
    </CardHeader>
  </MinHeight>
  <MinHeight
    autoUpdate={false}
    key="bodyMinHeight"
    minHeight={0}
  >
    <CardBody>
      <div
        className="fadein"
      >
        <ChartArea
          chartLegend={[Function]}
          chartTooltip={[Function]}
          dataSets={Array []}
          domain={Object {}}
          height={275}
          key="chart_{\\"granularity\\":\\"daily\\"}"
          padding={
            Object {
              "bottom": 75,
              "left": 50,
              "right": 50,
              "top": 50,
            }
          }
          themeColor="blue"
          xAxisFixLabelOverlap={true}
          xAxisLabelIncrement={5}
          xAxisTickFormat={[Function]}
          yAxisTickFormat={[Function]}
        />
      </div>
    </CardBody>
  </MinHeight>
</Card>
`;

exports[`GraphCard Component should render multiple states: error passes values 1`] = `
Object {
  "chartBarData": Array [
    Object {
      "animate": Object {
        "duration": 250,
        "onLoad": Object {
          "duration": 250,
        },
      },
      "data": Array [
        Object {
          "date": 2019-06-01T00:00:00.000Z,
          "x": 0,
          "y": 10,
        },
        Object {
          "date": 2019-06-08T00:00:00.000Z,
          "x": 1,
          "y": 12,
        },
        Object {
          "date": 2019-06-25T00:00:00.000Z,
          "x": 2,
          "y": 3,
        },
      ],
      "id": "physicalSockets",
      "isStacked": true,
      "isThreshold": false,
      "strokeWidth": 2,
    },
  ],
}
`;

exports[`GraphCard Component should render multiple states: error with 403 status 1`] = `
<Card
  className="curiosity-usage-graph"
>
  <MinHeight
    autoUpdate={false}
    key="headerMinHeight"
    minHeight={0}
  >
    <CardHeader>
      <CardTitle>
        <Title
          headingLevel="h2"
          size="lg"
        />
      </CardTitle>
      <CardActions
        className="blur"
      >
        <Select
          aria-label="t(curiosity-graph.dropdownPlaceholder)"
          ariaLabel="Select option"
          className=""
          id="generatedid-"
          isDisabled={false}
          isToggleText={true}
          name={null}
          onSelect={[Function]}
          options={
            Array [
              Object {
                "selected": true,
                "title": "t(curiosity-graph.dropdownDaily)",
                "value": "daily",
              },
              Object {
                "title": "t(curiosity-graph.dropdownWeekly)",
                "value": "weekly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownMonthly)",
                "value": "monthly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownQuarterly)",
                "value": "quarterly",
              },
            ]
          }
          placeholder="t(curiosity-graph.dropdownPlaceholder)"
          selectedOptions="daily"
          toggleIcon={null}
          variant="single"
        />
      </CardActions>
    </CardHeader>
  </MinHeight>
  <MinHeight
    autoUpdate={false}
    key="bodyMinHeight"
    minHeight={0}
  >
    <CardBody>
      <div
        className="blur"
      >
        <ChartArea
          chartLegend={[Function]}
          chartTooltip={[Function]}
          dataSets={
            Array [
              Object {
                "animate": Object {
                  "duration": 250,
                  "onLoad": Object {
                    "duration": 250,
                  },
                },
                "data": Array [
                  Object {
                    "date": 2019-06-01T00:00:00.000Z,
                    "x": 0,
                    "y": 10,
                  },
                  Object {
                    "date": 2019-06-08T00:00:00.000Z,
                    "x": 1,
                    "y": 12,
                  },
                  Object {
                    "date": 2019-06-25T00:00:00.000Z,
                    "x": 2,
                    "y": 3,
                  },
                ],
                "id": "physicalSockets",
                "isStacked": true,
                "isThreshold": false,
                "strokeWidth": 2,
              },
            ]
          }
          domain={Object {}}
          height={275}
          key="chart_{\\"granularity\\":\\"daily\\"}"
          padding={
            Object {
              "bottom": 75,
              "left": 50,
              "right": 50,
              "top": 50,
            }
          }
          themeColor="blue"
          xAxisFixLabelOverlap={true}
          xAxisLabelIncrement={5}
          xAxisTickFormat={[Function]}
          yAxisTickFormat={[Function]}
        />
      </div>
    </CardBody>
  </MinHeight>
</Card>
`;

exports[`GraphCard Component should render multiple states: error with 500 status 1`] = `
<Card
  className="curiosity-usage-graph"
>
  <MinHeight
    autoUpdate={false}
    key="headerMinHeight"
    minHeight={0}
  >
    <CardHeader>
      <CardTitle>
        <Title
          headingLevel="h2"
          size="lg"
        />
      </CardTitle>
      <CardActions
        className="blur"
      >
        <Select
          aria-label="t(curiosity-graph.dropdownPlaceholder)"
          ariaLabel="Select option"
          className=""
          id="generatedid-"
          isDisabled={false}
          isToggleText={true}
          name={null}
          onSelect={[Function]}
          options={
            Array [
              Object {
                "selected": true,
                "title": "t(curiosity-graph.dropdownDaily)",
                "value": "daily",
              },
              Object {
                "title": "t(curiosity-graph.dropdownWeekly)",
                "value": "weekly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownMonthly)",
                "value": "monthly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownQuarterly)",
                "value": "quarterly",
              },
            ]
          }
          placeholder="t(curiosity-graph.dropdownPlaceholder)"
          selectedOptions="daily"
          toggleIcon={null}
          variant="single"
        />
      </CardActions>
    </CardHeader>
  </MinHeight>
  <MinHeight
    autoUpdate={false}
    key="bodyMinHeight"
    minHeight={0}
  >
    <CardBody>
      <div
        className="blur"
      >
        <ChartArea
          chartLegend={[Function]}
          chartTooltip={[Function]}
          dataSets={
            Array [
              Object {
                "animate": Object {
                  "duration": 250,
                  "onLoad": Object {
                    "duration": 250,
                  },
                },
                "data": Array [
                  Object {
                    "date": 2019-06-01T00:00:00.000Z,
                    "x": 0,
                    "y": 10,
                  },
                  Object {
                    "date": 2019-06-08T00:00:00.000Z,
                    "x": 1,
                    "y": 12,
                  },
                  Object {
                    "date": 2019-06-25T00:00:00.000Z,
                    "x": 2,
                    "y": 3,
                  },
                ],
                "id": "physicalSockets",
                "isStacked": true,
                "isThreshold": false,
                "strokeWidth": 2,
              },
            ]
          }
          domain={Object {}}
          height={275}
          key="chart_{\\"granularity\\":\\"daily\\"}"
          padding={
            Object {
              "bottom": 75,
              "left": 50,
              "right": 50,
              "top": 50,
            }
          }
          themeColor="blue"
          xAxisFixLabelOverlap={true}
          xAxisLabelIncrement={5}
          xAxisTickFormat={[Function]}
          yAxisTickFormat={[Function]}
        />
      </div>
    </CardBody>
  </MinHeight>
</Card>
`;

exports[`GraphCard Component should render multiple states: fulfilled 1`] = `
<Card
  className="curiosity-usage-graph"
>
  <MinHeight
    autoUpdate={false}
    key="headerMinHeight"
    minHeight={0}
  >
    <CardHeader>
      <CardTitle>
        <Title
          headingLevel="h2"
          size="lg"
        />
      </CardTitle>
      <CardActions
        className=""
      >
        <Select
          aria-label="t(curiosity-graph.dropdownPlaceholder)"
          ariaLabel="Select option"
          className=""
          id="generatedid-"
          isDisabled={false}
          isToggleText={true}
          name={null}
          onSelect={[Function]}
          options={
            Array [
              Object {
                "selected": true,
                "title": "t(curiosity-graph.dropdownDaily)",
                "value": "daily",
              },
              Object {
                "title": "t(curiosity-graph.dropdownWeekly)",
                "value": "weekly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownMonthly)",
                "value": "monthly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownQuarterly)",
                "value": "quarterly",
              },
            ]
          }
          placeholder="t(curiosity-graph.dropdownPlaceholder)"
          selectedOptions="daily"
          toggleIcon={null}
          variant="single"
        />
      </CardActions>
    </CardHeader>
  </MinHeight>
  <MinHeight
    autoUpdate={false}
    key="bodyMinHeight"
    minHeight={0}
  >
    <CardBody>
      <div
        className="fadein"
      >
        <ChartArea
          chartLegend={[Function]}
          chartTooltip={[Function]}
          dataSets={
            Array [
              Object {
                "animate": Object {
                  "duration": 250,
                  "onLoad": Object {
                    "duration": 250,
                  },
                },
                "data": Array [
                  Object {
                    "date": 2019-06-01T00:00:00.000Z,
                    "x": 0,
                    "y": 10,
                  },
                  Object {
                    "date": 2019-06-08T00:00:00.000Z,
                    "x": 1,
                    "y": 12,
                  },
                  Object {
                    "date": 2019-06-25T00:00:00.000Z,
                    "x": 2,
                    "y": 3,
                  },
                ],
                "id": "physicalSockets",
                "isStacked": true,
                "isThreshold": false,
                "strokeWidth": 2,
              },
            ]
          }
          domain={Object {}}
          height={275}
          key="chart_{\\"granularity\\":\\"daily\\"}"
          padding={
            Object {
              "bottom": 75,
              "left": 50,
              "right": 50,
              "top": 50,
            }
          }
          themeColor="blue"
          xAxisFixLabelOverlap={true}
          xAxisLabelIncrement={5}
          xAxisTickFormat={[Function]}
          yAxisTickFormat={[Function]}
        />
      </div>
    </CardBody>
  </MinHeight>
</Card>
`;

exports[`GraphCard Component should render multiple states: pending 1`] = `
<Card
  className="curiosity-usage-graph"
>
  <MinHeight
    autoUpdate={false}
    key="headerMinHeight"
    minHeight={0}
  >
    <CardHeader>
      <CardTitle>
        <Title
          headingLevel="h2"
          size="lg"
        />
      </CardTitle>
      <CardActions
        className=""
      >
        <Select
          aria-label="t(curiosity-graph.dropdownPlaceholder)"
          ariaLabel="Select option"
          className=""
          id="generatedid-"
          isDisabled={false}
          isToggleText={true}
          name={null}
          onSelect={[Function]}
          options={
            Array [
              Object {
                "selected": true,
                "title": "t(curiosity-graph.dropdownDaily)",
                "value": "daily",
              },
              Object {
                "title": "t(curiosity-graph.dropdownWeekly)",
                "value": "weekly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownMonthly)",
                "value": "monthly",
              },
              Object {
                "title": "t(curiosity-graph.dropdownQuarterly)",
                "value": "quarterly",
              },
            ]
          }
          placeholder="t(curiosity-graph.dropdownPlaceholder)"
          selectedOptions="daily"
          toggleIcon={null}
          variant="single"
        />
      </CardActions>
    </CardHeader>
  </MinHeight>
  <MinHeight
    autoUpdate={false}
    key="bodyMinHeight"
    minHeight={0}
  >
    <CardBody>
      <div
        className="fadein"
      >
        <Loader
          skeletonProps={
            Object {
              "size": "sm",
            }
          }
          tableProps={Object {}}
          variant="graph"
        />
      </div>
    </CardBody>
  </MinHeight>
</Card>
`;

exports[`GraphCard Component should return an empty render when disabled: disabled component 1`] = `""`;
