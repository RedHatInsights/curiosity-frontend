// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphCardChartLegend Component should handle a click event: click event post 1`] = `
<Button
  className="victory-legend-item"
  component="a"
  icon={
    <div
      aria-hidden={true}
      className="legend-icon"
      style={
        Object {
          "backgroundColor": "#000000",
          "visibility": "visible",
        }
      }
    />
  }
  isDisabled={false}
  key="curiosity-button-loremIpsum"
  onClick={[Function]}
  onKeyPress={[Function]}
  tabIndex={0}
  variant="link"
>
  t(curiosity-graph.loremIpsumLabel,curiosity-graph.noLabel, [object Object])
</Button>
`;

exports[`GraphCardChartLegend Component should handle a click event: click event pre 1`] = `
<Button
  className="victory-legend-item"
  component="a"
  icon={
    <div
      aria-hidden={true}
      className="legend-icon"
      style={
        Object {
          "backgroundColor": "#000000",
          "visibility": "visible",
        }
      }
    />
  }
  isDisabled={false}
  key="curiosity-button-loremIpsum"
  onClick={[Function]}
  onKeyPress={[Function]}
  tabIndex={0}
  variant="link"
>
  t(curiosity-graph.loremIpsumLabel,curiosity-graph.noLabel, [object Object])
</Button>
`;

exports[`GraphCardChartLegend Component should handle a click event: click event update 1`] = `
<Button
  className="victory-legend-item"
  component="a"
  icon={
    <EyeSlashIcon
      color="currentColor"
      noVerticalAlign={false}
      size="sm"
    />
  }
  isDisabled={false}
  key="curiosity-button-loremIpsum"
  onClick={[Function]}
  onKeyPress={[Function]}
  tabIndex={0}
  variant="link"
>
  t(curiosity-graph.loremIpsumLabel,curiosity-graph.noLabel, [object Object])
</Button>
`;

exports[`GraphCardChartLegend Component should handle variations in data when returning legend items: legend item, MISSING tooltip content 1`] = `
<Button
  className="victory-legend-item"
  component="a"
  icon={
    <div
      aria-hidden={true}
      className="legend-icon"
      style={
        Object {
          "backgroundColor": "#000000",
          "visibility": "visible",
        }
      }
    />
  }
  isDisabled={false}
  onClick={[Function]}
  onKeyPress={[Function]}
  tabIndex={0}
  variant="link"
>
  lorem ispum
</Button>
`;

exports[`GraphCardChartLegend Component should handle variations in data when returning legend items: legend item, WITH tooltip content 1`] = `
<Tooltip
  appendTo={[Function]}
  aria="describedby"
  boundary="window"
  className=""
  content={
    <p>
      dolor sit
    </p>
  }
  distance={-10}
  enableFlip={true}
  entryDelay={100}
  exitDelay={0}
  flipBehavior={
    Array [
      "top",
      "right",
      "bottom",
      "left",
      "top",
      "right",
      "bottom",
    ]
  }
  id=""
  isAppLauncher={false}
  isContentLeftAligned={false}
  isVisible={false}
  maxWidth="18.75rem"
  position="top"
  tippyProps={Object {}}
  trigger="mouseenter focus"
  zIndex={9999}
>
  <Button
    className="victory-legend-item"
    component="a"
    icon={
      <div
        aria-hidden={true}
        className="legend-icon"
        style={
          Object {
            "backgroundColor": "#000000",
            "visibility": "visible",
          }
        }
      />
    }
    isDisabled={false}
    onClick={[Function]}
    onKeyPress={[Function]}
    tabIndex={0}
    variant="link"
  >
    lorem ispum
  </Button>
</Tooltip>
`;

exports[`GraphCardChartLegend Component should handle variations in data when returning legend items: legend item, disabled 1`] = `
<Button
  className="victory-legend-item"
  component="a"
  icon={
    <EyeSlashIcon
      color="currentColor"
      noVerticalAlign={false}
      size="sm"
    />
  }
  isDisabled={true}
  onClick={[Function]}
  onKeyPress={[Function]}
  tabIndex={0}
  variant="link"
>
  lorem ispum
</Button>
`;

exports[`GraphCardChartLegend Component should render a basic component: basic 1`] = `
<Fragment>
  <Tooltip
    appendTo={[Function]}
    aria="describedby"
    boundary="window"
    className=""
    content={
      <p>
        t(curiosity-graph.loremIpsumLegendTooltip, [object Object])
      </p>
    }
    distance={-10}
    enableFlip={true}
    entryDelay={100}
    exitDelay={0}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    id=""
    isAppLauncher={false}
    isContentLeftAligned={false}
    isVisible={false}
    key="curiosity-tooltip-loremIpsum"
    maxWidth="18.75rem"
    position="top"
    tippyProps={Object {}}
    trigger="mouseenter focus"
    zIndex={9999}
  >
    <Button
      className="victory-legend-item"
      component="a"
      icon={
        <div
          aria-hidden={true}
          className="legend-icon"
          style={
            Object {
              "backgroundColor": "#000000",
              "visibility": "visible",
            }
          }
        />
      }
      isDisabled={false}
      key="curiosity-button-loremIpsum"
      onClick={[Function]}
      onKeyPress={[Function]}
      tabIndex={0}
      variant="link"
    >
      t(curiosity-graph.loremIpsumLabel,curiosity-graph.noLabel, [object Object])
    </Button>
  </Tooltip>
</Fragment>
`;

exports[`GraphCardChartLegend Component should render basic data: data 1`] = `
<Fragment>
  <Tooltip
    appendTo={[Function]}
    aria="describedby"
    boundary="window"
    className=""
    content={
      <p>
        t(curiosity-graph.loremIpsumLegendTooltip, [object Object])
      </p>
    }
    distance={-10}
    enableFlip={true}
    entryDelay={100}
    exitDelay={0}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    id=""
    isAppLauncher={false}
    isContentLeftAligned={false}
    isVisible={false}
    key="curiosity-tooltip-loremIpsum"
    maxWidth="18.75rem"
    position="top"
    tippyProps={Object {}}
    trigger="mouseenter focus"
    zIndex={9999}
  >
    <Button
      className="victory-legend-item"
      component="a"
      icon={
        <div
          aria-hidden={true}
          className="legend-icon"
          style={
            Object {
              "backgroundColor": "#000000",
              "visibility": "visible",
            }
          }
        />
      }
      isDisabled={false}
      key="curiosity-button-loremIpsum"
      onClick={[Function]}
      onKeyPress={[Function]}
      tabIndex={0}
      variant="link"
    >
      t(curiosity-graph.loremIpsumLabel,curiosity-graph.noLabel, [object Object])
    </Button>
  </Tooltip>
  <Tooltip
    appendTo={[Function]}
    aria="describedby"
    boundary="window"
    className=""
    content={
      <p>
        t(curiosity-graph.ametConsecteturLegendTooltip, [object Object])
      </p>
    }
    distance={-10}
    enableFlip={true}
    entryDelay={100}
    exitDelay={0}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    id=""
    isAppLauncher={false}
    isContentLeftAligned={false}
    isVisible={false}
    key="curiosity-tooltip-ametConsectetur"
    maxWidth="18.75rem"
    position="top"
    tippyProps={Object {}}
    trigger="mouseenter focus"
    zIndex={9999}
  >
    <Button
      className="victory-legend-item"
      component="a"
      icon={
        <EyeSlashIcon
          color="currentColor"
          noVerticalAlign={false}
          size="sm"
        />
      }
      isDisabled={true}
      key="curiosity-button-ametConsectetur"
      onClick={[Function]}
      onKeyPress={[Function]}
      tabIndex={0}
      variant="link"
    >
      t(curiosity-graph.ametConsecteturLabel,curiosity-graph.noLabel, [object Object])
    </Button>
  </Tooltip>
  <Tooltip
    appendTo={[Function]}
    aria="describedby"
    boundary="window"
    className=""
    content={
      <p>
        t(curiosity-graph.dolorSitLegendTooltip,curiosity-graph.thresholdLegendTooltip, [object Object])
      </p>
    }
    distance={-10}
    enableFlip={true}
    entryDelay={100}
    exitDelay={0}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    id=""
    isAppLauncher={false}
    isContentLeftAligned={false}
    isVisible={false}
    key="curiosity-tooltip-dolorSit"
    maxWidth="18.75rem"
    position="top"
    tippyProps={Object {}}
    trigger="mouseenter focus"
    zIndex={9999}
  >
    <Button
      className="victory-legend-item"
      component="a"
      icon={
        <hr
          aria-hidden={true}
          className="threshold-legend-icon"
          style={
            Object {
              "borderTopColor": "#ff0000",
              "visibility": "visible",
            }
          }
        />
      }
      isDisabled={false}
      key="curiosity-button-dolorSit"
      onClick={[Function]}
      onKeyPress={[Function]}
      tabIndex={0}
      variant="link"
    >
      t(curiosity-graph.dolorSitLabel,curiosity-graph.thresholdLabel, [object Object])
    </Button>
  </Tooltip>
  <Tooltip
    appendTo={[Function]}
    aria="describedby"
    boundary="window"
    className=""
    content={
      <p>
        t(curiosity-graph.nonCursusLegendTooltip,curiosity-graph.thresholdLegendTooltip, [object Object])
      </p>
    }
    distance={-10}
    enableFlip={true}
    entryDelay={100}
    exitDelay={0}
    flipBehavior={
      Array [
        "top",
        "right",
        "bottom",
        "left",
        "top",
        "right",
        "bottom",
      ]
    }
    id=""
    isAppLauncher={false}
    isContentLeftAligned={false}
    isVisible={false}
    key="curiosity-tooltip-nonCursus"
    maxWidth="18.75rem"
    position="top"
    tippyProps={Object {}}
    trigger="mouseenter focus"
    zIndex={9999}
  >
    <Button
      className="victory-legend-item"
      component="a"
      icon={
        <hr
          aria-hidden={true}
          className="threshold-legend-icon"
          style={
            Object {
              "borderTopColor": "#ff0000",
              "visibility": "visible",
            }
          }
        />
      }
      isDisabled={false}
      key="curiosity-button-nonCursus"
      onClick={[Function]}
      onKeyPress={[Function]}
      tabIndex={0}
      variant="link"
    >
      t(curiosity-graph.nonCursusLabel,curiosity-graph.thresholdLabel, [object Object])
    </Button>
  </Tooltip>
</Fragment>
`;
