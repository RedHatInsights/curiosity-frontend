// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RouterHelpers should apply a simple pathJoin helper: double forward slash 1`] = `"//hello/world/lorem/ipsum/dolor"`;

exports[`RouterHelpers should apply a simple pathJoin helper: forward slashes everywhere 1`] = `"//hello/world/lorem/ipsum/dolor"`;

exports[`RouterHelpers should apply a simple pathJoin helper: single forward slash 1`] = `"/hello/world/lorem/ipsum/dolor/"`;

exports[`RouterHelpers should apply a simple pathJoin helper: triple forward slash 1`] = `"//hello/world/lorem/ipsum/dolor"`;

exports[`RouterHelpers should return a generated baseName using NO path prefix: app lorem route name 1`] = `"/appName"`;

exports[`RouterHelpers should return a generated baseName using NO path prefix: empty pathPrefix: app base name 1`] = `"/appName"`;

exports[`RouterHelpers should return a generated baseName using a beta path prefix: beta app base name 1`] = `"/beta/appName"`;

exports[`RouterHelpers should return a generated baseName using a beta path prefix: beta app lorem route name 1`] = `"/beta/appName"`;

exports[`RouterHelpers should return a generated baseName using an insights path prefix: insights, app base name 1`] = `"/insights/appName"`;

exports[`RouterHelpers should return a generated baseName using an insights path prefix: insights, app lorem route name 1`] = `"/insights/appName"`;

exports[`RouterHelpers should return a generated baseName using an insights path prefix: insights, beta app base name 1`] = `"/beta/insights/appName"`;

exports[`RouterHelpers should return a generated baseName using an insights path prefix: insights, beta app lorem route name 1`] = `"/beta/insights/appName"`;

exports[`RouterHelpers should return a generated basePath: insights, app base path 1`] = `"/insights/"`;

exports[`RouterHelpers should return a generated basePath: insights, app lorem route name base path 1`] = `"/insights/"`;

exports[`RouterHelpers should return a generated basePath: insights, beta app base path 1`] = `"/beta/insights/"`;

exports[`RouterHelpers should return a generated basePath: insights, beta app lorem route name base path 1`] = `"/beta/insights/"`;

exports[`RouterHelpers should return parse search parameters into unique key, value pairs: unique pairs 1`] = `
{
  "dolor": "sit",
  "lorem": "hello world",
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: NO search and hash 1`] = `
{
  "productId": "RHEL",
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: detail: alias insights 1`] = `
{
  "productId": "RHEL",
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: detail: match specific path 1`] = `
{
  "productId": "RHEL",
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: detail: missing parameters 1`] = `
{
  "productId": undefined,
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: detail: missing pathName 1`] = `
{
  "productId": undefined,
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: detail: specific navigation ID 1`] = `
{
  "productId": "rhods",
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: detail: specific product path 1`] = `
{
  "productId": "rhods",
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: search 1`] = `
{
  "productId": "RHEL",
}
`;

exports[`RouterHelpers should return product configuration details from a url, path, or path-like id, or alias: search and hash 1`] = `
{
  "productId": "RHEL",
}
`;

exports[`RouterHelpers should return specific properties: routerHelpers 1`] = `
{
  "appName": "subscriptions",
  "dynamicBaseName": [Function],
  "dynamicBasePath": [Function],
  "errorRoute": {
    "activateOnError": true,
    "component": "optinView/optinView",
    "default": false,
    "disabled": false,
    "id": "optin",
    "path": "/optin",
    "redirect": null,
  },
  "getRouteConfigByPath": [Function],
  "importView": [Function],
  "parseSearchParams": [Function],
  "pathJoin": [Function],
  "redirectRoute": {
    "activateOnError": false,
    "component": "productView/productViewMissing",
    "default": true,
    "disabled": false,
    "id": "missing",
    "path": "/",
    "redirect": "./",
  },
}
`;

exports[`RouterHelpers should return specific properties: routerHelpers: routes 1`] = `
[
  "/openshift-container",
  "/OpenShift Container Platform",
  "/openshift",
  "/OpenShift-metrics",
  "/openshift-dedicated-metrics",
  "/openshift-dedicated",
  "/rhacs",
  "/rhel",
  "/insights",
  "/rhods",
  "/rhosak",
  "/streams",
  "/satellite",
  "/optin",
  "/",
]
`;
