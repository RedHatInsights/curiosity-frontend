// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Authentication Component should allow being disabled: disabled 1`] = `
<Context.Provider
  value={
    {
      "authorized": {
        "subscriptions": true,
      },
      "errorCodes": [],
      "errorStatus": undefined,
    }
  }
>
  <MessageView>
    <Maintenance
      description="t(curiosity-auth.maintenance, {"context":"description"})"
    />
  </MessageView>
</Context.Provider>
`;

exports[`Authentication Component should render a basic component: basic 1`] = `
<Context.Provider
  value={
    {
      "authorized": {},
      "errorCodes": [],
      "errorStatus": undefined,
    }
  }
>
  <MessageView>
    <NotAuthorized
      serviceName="Subscriptions"
    />
  </MessageView>
</Context.Provider>
`;

exports[`Authentication Component should render a component authorized: authorized 1`] = `
<Context.Provider
  value={
    {
      "authorized": {
        "subscriptions": true,
      },
      "errorCodes": [],
      "errorStatus": undefined,
    }
  }
>
  <span
    className="test"
  >
    lorem
  </span>
</Context.Provider>
`;

exports[`Authentication Component should render a component error: error 1`] = `
<Context.Provider
  value={
    {
      "authorized": {},
      "errorCodes": [],
      "errorStatus": undefined,
    }
  }
>
  <MessageView>
    <NotAuthorized
      serviceName="Subscriptions"
    />
  </MessageView>
</Context.Provider>
`;

exports[`Authentication Component should render a component pending: pending 1`] = `
<Context.Provider
  value={
    {
      "authorized": {},
      "errorCodes": [],
      "errorStatus": undefined,
    }
  }
>
  <MessageView
    icon={<BinocularsIcon />}
    message="t(curiosity-auth.pending, {"context":"description"})"
    pageTitle="Â "
  />
</Context.Provider>
`;

exports[`Authentication Component should return a message on 401 error: 401 error 1`] = `
<Context.Provider
  value={
    {
      "authorized": {},
      "errorCodes": [],
      "errorStatus": 401,
    }
  }
>
  <MessageView>
    <NotAuthorized
      serviceName="Subscriptions"
    />
  </MessageView>
</Context.Provider>
`;

exports[`Authentication Component should return a redirect on 418 error: 418 error 1`] = `
<Context.Provider
  value={
    {
      "authorized": {},
      "errorCodes": [],
      "errorStatus": 418,
    }
  }
>
  <OptinView />
</Context.Provider>
`;

exports[`Authentication Component should return a redirect on a specific 403 error and error code: 403 error 1`] = `
<Context.Provider
  value={
    {
      "authorized": {},
      "errorCodes": [],
      "errorStatus": 403,
    }
  }
>
  <MessageView>
    <NotAuthorized
      serviceName="Subscriptions"
    />
  </MessageView>
</Context.Provider>
`;

exports[`Authentication Component should return a redirect on a specific 403 error and error code: 403 redirect error 1`] = `
<Context.Provider
  value={
    {
      "authorized": {},
      "errorCodes": [
        "SUBSCRIPTIONS1004",
      ],
      "errorStatus": 403,
    }
  }
>
  <OptinView />
</Context.Provider>
`;
