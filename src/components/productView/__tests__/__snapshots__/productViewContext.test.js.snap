// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProductViewContext should apply a hook factory for retrieving api queries: query factory 1`] = `
{
  "lorem": "ipsum",
}
`;

exports[`ProductViewContext should apply a hook for retrieving product context: product context, basic 1`] = `
{
  "dolor": {
    "dolor": "sit",
  },
  "initialGraphFilters": [],
  "initialInventoryFilters": [],
  "initialSubscriptionsInventoryFilters": [],
  "lorem": {
    "lorem": "ipsum",
  },
  "productId": "lorem",
  "viewId": "viewIpsum",
}
`;

exports[`ProductViewContext should apply a hook for retrieving product context: product context, uom filtering cores 1`] = `
{
  "aliases": [
    "OpenShift Container Platform",
    "openshift-container",
    "container",
    "platform",
    "shift",
  ],
  "graphTallyQuery": {
    "granularity": "Daily",
  },
  "initialGraphFilters": [
    {
      "filters": [
        {
          "color": "#06c",
          "fill": "#8bc1f7",
          "isOptional": true,
          "metric": "Cores",
          "stroke": "#06c",
        },
        {
          "chartType": "threshold",
          "isOptional": true,
          "metric": "Cores",
        },
      ],
      "isOptional": false,
    },
  ],
  "initialGraphSettings": {
    "actions": [
      {
        "id": "uom",
        "position": "right",
      },
      {
        "id": "granularity",
        "position": "right",
      },
    ],
    "isCardTitleDescription": true,
  },
  "initialGuestsFilters": [
    {
      "cell": [Function],
      "header": [Function],
      "metric": "display_name",
    },
    {
      "metric": "inventory_id",
      "width": 40,
    },
    {
      "cell": [Function],
      "metric": "last_seen",
      "width": 15,
    },
  ],
  "initialInventoryFilters": [
    {
      "cell": [Function],
      "isSort": true,
      "metric": "display_name",
    },
    {
      "cell": [Function],
      "header": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "Cores",
      "width": 15,
    },
    {
      "cell": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "last_seen",
      "width": 15,
    },
  ],
  "initialInventorySettings": {
    "actions": [
      {
        "id": "display_name_contains",
      },
    ],
    "guestContent": [Function],
  },
  "initialOption": "cores",
  "initialSubscriptionsInventoryFilters": [
    {
      "isSort": true,
      "isWrap": true,
      "metric": "product_name",
    },
    {
      "isSort": true,
      "isWrap": true,
      "metric": "service_level",
      "width": 15,
    },
    {
      "isSort": true,
      "isWrap": true,
      "metric": "quantity",
      "width": 20,
    },
    {
      "cell": [Function],
      "header": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "total_capacity",
      "width": 15,
    },
    {
      "cell": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "next_event_date",
      "width": 15,
    },
  ],
  "initialToolbarFilters": [
    {
      "id": "sla",
    },
  ],
  "inventoryGuestsQuery": {
    "limit": 100,
    "offset": 0,
  },
  "inventoryHostsQuery": {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "last_seen",
  },
  "inventorySubscriptionsQuery": {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "next_event_date",
  },
  "productDisplay": "capacity",
  "productGroup": "openshift",
  "productId": "OpenShift Container Platform",
  "productLabel": "OpenShift Container Platform",
  "productPath": "openshift",
  "query": {
    "beginning": "2019-06-20T00:00:00.000Z",
    "ending": "2019-07-20T23:59:59.999Z",
    "uom": "cores",
  },
  "viewId": "viewopenshift",
}
`;

exports[`ProductViewContext should apply a hook for retrieving product context: product context, uom filtering sockets 1`] = `
{
  "aliases": [
    "OpenShift Container Platform",
    "openshift-container",
    "container",
    "platform",
    "shift",
  ],
  "graphTallyQuery": {
    "granularity": "Daily",
  },
  "initialGraphFilters": [
    {
      "filters": [
        {
          "color": "#06c",
          "fill": "#8bc1f7",
          "isOptional": true,
          "metric": "Sockets",
          "stroke": "#06c",
        },
        {
          "chartType": "threshold",
          "isOptional": true,
          "metric": "Sockets",
        },
      ],
      "isOptional": false,
    },
  ],
  "initialGraphSettings": {
    "actions": [
      {
        "id": "uom",
        "position": "right",
      },
      {
        "id": "granularity",
        "position": "right",
      },
    ],
    "isCardTitleDescription": true,
  },
  "initialGuestsFilters": [
    {
      "cell": [Function],
      "header": [Function],
      "metric": "display_name",
    },
    {
      "metric": "inventory_id",
      "width": 40,
    },
    {
      "cell": [Function],
      "metric": "last_seen",
      "width": 15,
    },
  ],
  "initialInventoryFilters": [
    {
      "cell": [Function],
      "isSort": true,
      "metric": "display_name",
    },
    {
      "cell": [Function],
      "header": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "Cores",
      "width": 15,
    },
    {
      "cell": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "last_seen",
      "width": 15,
    },
  ],
  "initialInventorySettings": {
    "actions": [
      {
        "id": "display_name_contains",
      },
    ],
    "guestContent": [Function],
  },
  "initialOption": "cores",
  "initialSubscriptionsInventoryFilters": [
    {
      "isSort": true,
      "isWrap": true,
      "metric": "product_name",
    },
    {
      "isSort": true,
      "isWrap": true,
      "metric": "service_level",
      "width": 15,
    },
    {
      "isSort": true,
      "isWrap": true,
      "metric": "quantity",
      "width": 20,
    },
    {
      "cell": [Function],
      "header": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "total_capacity",
      "width": 15,
    },
    {
      "cell": [Function],
      "isSort": true,
      "isWrap": true,
      "metric": "next_event_date",
      "width": 15,
    },
  ],
  "initialToolbarFilters": [
    {
      "id": "sla",
    },
  ],
  "inventoryGuestsQuery": {
    "limit": 100,
    "offset": 0,
  },
  "inventoryHostsQuery": {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "last_seen",
  },
  "inventorySubscriptionsQuery": {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "next_event_date",
  },
  "productDisplay": "capacity",
  "productGroup": "openshift",
  "productId": "OpenShift Container Platform",
  "productLabel": "OpenShift Container Platform",
  "productPath": "openshift",
  "query": {
    "beginning": "2019-06-20T00:00:00.000Z",
    "ending": "2019-07-20T23:59:59.999Z",
    "uom": "cores",
  },
  "viewId": "viewopenshift",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: graphTallyQuery 1`] = `
{
  "granularity": "testGranularity",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: inventoryGuestsQuery 1`] = `
{
  "offset": "testOffset",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: inventoryHostsQuery 1`] = `
{
  "limit": "testLimit",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: inventorySubscriptionsQuery 1`] = `
{
  "sla": "testSla",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: query 1`] = `
{
  "lorem": "ipsum",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: toolbarQuery 1`] = `
{
  "granularity": "testGranularity",
  "limit": "testLimit",
  "lorem": "ipsum",
  "sla": "testSla",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productConfig 1`] = `
{
  "productGroup": "loremIpsum",
  "productId": "lorem",
  "productLabel": "labelLorem",
  "productVariants": undefined,
  "viewId": "viewIpsum",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productGraphConfig 1`] = `
{
  "filters": [
    {
      "lorem": "ipsum",
    },
  ],
  "settings": {
    "lorem": "ipsum",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productInventoryGuestsConfig 1`] = `
{
  "filters": [
    {
      "sit": "dolor",
    },
  ],
  "initialQuery": {},
  "settings": {
    "sit": "dolor",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productInventoryHostsConfig 1`] = `
{
  "filters": [
    {
      "dolor": "sit",
    },
  ],
  "settings": {
    "dolor": "sit",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productInventorySubscriptionsConfig 1`] = `
{
  "filters": [
    {
      "sit": "amet",
    },
  ],
  "settings": {
    "sit": "amet",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productToolbarConfig 1`] = `
{
  "filters": [
    {
      "ipsum": "dolor",
    },
    {
      "hello": "world",
    },
  ],
  "settings": {
    "ipsum": "dolor",
  },
}
`;

exports[`ProductViewContext should return specific properties: specific properties 1`] = `
{
  "DEFAULT_CONTEXT": [
    {},
    [Function],
  ],
  "ProductViewContext": {
    "$$typeof": Symbol(react.context),
    "Consumer": {
      "$$typeof": Symbol(react.context),
      "_context": [Circular],
    },
    "Provider": {
      "$$typeof": Symbol(react.provider),
      "_context": [Circular],
    },
    "_currentRenderer": null,
    "_currentRenderer2": null,
    "_currentValue": [
      {},
      [Function],
    ],
    "_currentValue2": [
      {},
      [Function],
    ],
    "_defaultValue": null,
    "_globalName": null,
    "_threadCount": 0,
  },
  "useGraphConfig": [Function],
  "useGraphTallyQuery": [Function],
  "useInventoryGuestsConfig": [Function],
  "useInventoryGuestsQuery": [Function],
  "useInventoryHostsConfig": [Function],
  "useInventoryHostsQuery": [Function],
  "useInventorySubscriptionsConfig": [Function],
  "useInventorySubscriptionsQuery": [Function],
  "useProduct": [Function],
  "useProductContext": [Function],
  "useQuery": [Function],
  "useQueryFactory": [Function],
  "useToolbarConfig": [Function],
  "useToolbarQuery": [Function],
}
`;
