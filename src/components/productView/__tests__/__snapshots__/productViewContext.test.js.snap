// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProductViewContext should apply a hook factory for retrieving api queries: query factory 1`] = `
Object {
  "lorem": "ipsum",
}
`;

exports[`ProductViewContext should apply a hook for retrieving product context: product context, basic 1`] = `
Object {
  "dolor": Object {
    "dolor": "sit",
  },
  "initialGraphFilters": Array [],
  "initialInventoryFilters": Array [],
  "initialSubscriptionsInventoryFilters": Array [],
  "lorem": Object {
    "lorem": "ipsum",
  },
  "productId": "lorem",
  "viewId": "viewIpsum",
}
`;

exports[`ProductViewContext should apply a hook for retrieving product context: product context, uom filtering cores 1`] = `
Object {
  "graphTallyQuery": Object {
    "granularity": "Daily",
  },
  "initialGraphFilters": Array [
    Object {
      "color": "#06c",
      "fill": "#8bc1f7",
      "id": "cores",
      "isOptional": true,
      "stroke": "#06c",
    },
    Object {
      "chartType": "threshold",
      "id": "thresholdCores",
      "isOptional": true,
    },
  ],
  "initialGraphSettings": Object {},
  "initialGuestsFilters": Array [
    Object {
      "cell": [Function],
      "header": [Function],
      "id": "displayName",
    },
    Object {
      "cellWidth": 40,
      "id": "inventoryId",
    },
    Object {
      "cell": [Function],
      "cellWidth": 15,
      "id": "lastSeen",
    },
  ],
  "initialInventoryFilters": Array [
    Object {
      "cell": [Function],
      "id": "displayName",
      "isSortable": true,
    },
    Object {
      "cellWidth": 15,
      "header": [Function],
      "id": "cores",
      "isOptional": true,
      "isSortable": true,
      "isWrappable": true,
    },
    Object {
      "cell": [Function],
      "cellWidth": 25,
      "id": "lastSeen",
      "isSortable": true,
      "isWrappable": true,
    },
  ],
  "initialInventorySettings": Object {},
  "initialOption": "cores",
  "initialSubscriptionsInventoryFilters": Array [
    Object {
      "id": "productName",
      "isSortable": false,
      "isWrappable": true,
    },
    Object {
      "cellWidth": 15,
      "id": "serviceLevel",
      "isSortable": true,
      "isWrappable": true,
    },
    Object {
      "cellWidth": 20,
      "id": "quantity",
      "isSortable": true,
      "isWrappable": true,
    },
    Object {
      "cellWidth": 15,
      "header": [Function],
      "id": "totalCapacity",
      "isSortable": false,
      "isWrappable": true,
    },
    Object {
      "cell": [Function],
      "cellWidth": 15,
      "id": "nextEventDate",
      "isSortable": true,
      "isWrappable": true,
    },
  ],
  "initialToolbarFilters": Array [
    Object {
      "id": "sla",
    },
  ],
  "inventoryHostsQuery": Object {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "last_seen",
  },
  "inventorySubscriptionsQuery": Object {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "next_event_date",
  },
  "productGroup": "OpenShift Container Platform",
  "productId": "OpenShift Container Platform",
  "productLabel": "OpenShift Container Platform",
  "query": Object {
    "beginning": "2019-06-20T00:00:00.000Z",
    "ending": "2019-07-20T23:59:59.999Z",
    "uom": "cores",
  },
  "viewId": "viewOpenShift Container Platform",
}
`;

exports[`ProductViewContext should apply a hook for retrieving product context: product context, uom filtering sockets 1`] = `
Object {
  "graphTallyQuery": Object {
    "granularity": "Daily",
  },
  "initialGraphFilters": Array [
    Object {
      "color": "#06c",
      "fill": "#8bc1f7",
      "id": "sockets",
      "isOptional": true,
      "stroke": "#06c",
    },
    Object {
      "chartType": "threshold",
      "id": "thresholdSockets",
      "isOptional": true,
    },
  ],
  "initialGraphSettings": Object {},
  "initialGuestsFilters": Array [
    Object {
      "cell": [Function],
      "header": [Function],
      "id": "displayName",
    },
    Object {
      "cellWidth": 40,
      "id": "inventoryId",
    },
    Object {
      "cell": [Function],
      "cellWidth": 15,
      "id": "lastSeen",
    },
  ],
  "initialInventoryFilters": Array [
    Object {
      "cell": [Function],
      "id": "displayName",
      "isSortable": true,
    },
    Object {
      "cellWidth": 15,
      "header": [Function],
      "id": "sockets",
      "isOptional": true,
      "isSortable": true,
      "isWrappable": true,
    },
    Object {
      "cell": [Function],
      "cellWidth": 25,
      "id": "lastSeen",
      "isSortable": true,
      "isWrappable": true,
    },
  ],
  "initialInventorySettings": Object {},
  "initialOption": "cores",
  "initialSubscriptionsInventoryFilters": Array [
    Object {
      "id": "productName",
      "isSortable": false,
      "isWrappable": true,
    },
    Object {
      "cellWidth": 15,
      "id": "serviceLevel",
      "isSortable": true,
      "isWrappable": true,
    },
    Object {
      "cellWidth": 20,
      "id": "quantity",
      "isSortable": true,
      "isWrappable": true,
    },
    Object {
      "cellWidth": 15,
      "header": [Function],
      "id": "totalCapacity",
      "isSortable": false,
      "isWrappable": true,
    },
    Object {
      "cell": [Function],
      "cellWidth": 15,
      "id": "nextEventDate",
      "isSortable": true,
      "isWrappable": true,
    },
  ],
  "initialToolbarFilters": Array [
    Object {
      "id": "sla",
    },
  ],
  "inventoryHostsQuery": Object {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "last_seen",
  },
  "inventorySubscriptionsQuery": Object {
    "dir": "desc",
    "limit": 100,
    "offset": 0,
    "sort": "next_event_date",
  },
  "productGroup": "OpenShift Container Platform",
  "productId": "OpenShift Container Platform",
  "productLabel": "OpenShift Container Platform",
  "query": Object {
    "beginning": "2019-06-20T00:00:00.000Z",
    "ending": "2019-07-20T23:59:59.999Z",
    "uom": "cores",
  },
  "viewId": "viewOpenShift Container Platform",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: graphTallyQuery 1`] = `
Object {
  "granularity": "testGranularity",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: inventoryGuestsQuery 1`] = `
Object {
  "limit": 100,
  "offset": "testOffset",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: inventoryHostsQuery 1`] = `
Object {
  "limit": "testLimit",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: inventorySubscriptionsQuery 1`] = `
Object {
  "sla": "testSla",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific api queries: query 1`] = `
Object {
  "lorem": "ipsum",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productConfig 1`] = `
Object {
  "productGroup": "loremIpsum",
  "productId": "lorem",
  "productLabel": "labelLorem",
  "viewId": "viewIpsum",
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productGraphConfig 1`] = `
Object {
  "filters": Array [
    Object {
      "lorem": "ipsum",
    },
  ],
  "settings": Object {
    "lorem": "ipsum",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productInventoryGuestsConfig 1`] = `
Object {
  "filters": Array [
    Object {
      "sit": "dolor",
    },
  ],
  "initialQuery": Object {},
  "settings": Object {
    "sit": "dolor",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productInventoryHostsConfig 1`] = `
Object {
  "filters": Array [
    Object {
      "dolor": "sit",
    },
  ],
  "settings": Object {
    "dolor": "sit",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productInventorySubscriptionsConfig 1`] = `
Object {
  "filters": Array [
    Object {
      "sit": "amet",
    },
  ],
  "settings": Object {
    "sit": "amet",
  },
}
`;

exports[`ProductViewContext should apply hooks for retrieving specific config filters and settings: productToolbarConfig 1`] = `
Object {
  "filters": Array [
    Object {
      "ipsum": "dolor",
    },
  ],
  "settings": Object {
    "ipsum": "dolor",
  },
}
`;

exports[`ProductViewContext should return specific properties: specific properties 1`] = `
Object {
  "DEFAULT_CONTEXT": Array [
    Object {},
    [Function],
  ],
  "ProductViewContext": Object {
    "$$typeof": Symbol(react.context),
    "Consumer": Object {
      "$$typeof": Symbol(react.context),
      "_calculateChangedBits": null,
      "_context": [Circular],
    },
    "Provider": Object {
      "$$typeof": Symbol(react.provider),
      "_context": [Circular],
    },
    "_calculateChangedBits": null,
    "_currentRenderer": null,
    "_currentRenderer2": null,
    "_currentValue": Array [
      Object {},
      [Function],
    ],
    "_currentValue2": Array [
      Object {},
      [Function],
    ],
    "_threadCount": 0,
  },
  "useGraphConfig": [Function],
  "useGraphTallyQuery": [Function],
  "useInventoryGuestsConfig": [Function],
  "useInventoryGuestsQuery": [Function],
  "useInventoryHostsConfig": [Function],
  "useInventoryHostsQuery": [Function],
  "useInventorySubscriptionsConfig": [Function],
  "useInventorySubscriptionsQuery": [Function],
  "useProduct": [Function],
  "useProductContext": [Function],
  "useQuery": [Function],
  "useQueryFactory": [Function],
  "useToolbarConfig": [Function],
}
`;
