// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cache service calls should handle caching service calls: cached responses, emulated 304 1`] = `
[
  "1. method=get, status=200, cacheId=c2127638620, desc=initial call",
  "2. method=get, status=304, cacheId=c2127638620, desc=repeat 1st call and config",
  "3. method=get, status=200, cacheId=c-1165300378, desc=updated config",
  "4. method=post, status=200, cacheId=null, desc=attempt post method",
  "5. method=get, status=304, cacheId=c-1165300378, desc=repeat 3rd call and config",
  "6. method=get, status=200, cacheId=null, desc=no caching",
]
`;

exports[`Cancel service calls should handle cancelling service calls: cancelled request, Promise.all 1`] = `[CanceledError: cancelled request]`;

exports[`Cancel service calls should handle cancelling service calls: cancelled request, Promise.allSettled 1`] = `
[
  {
    "reason": [CanceledError: cancelled request],
    "status": "rejected",
  },
  {
    "reason": [CanceledError: cancelled request],
    "status": "rejected",
  },
  {
    "status": "fulfilled",
    "value": Response {
      "code": undefined,
      "config": {
        "adapter": [Function],
        "cacheResponse": false,
        "cancelToken": CancelToken {
          "promise": Promise {
            "then": [Function],
          },
        },
        "data": undefined,
        "env": {
          "Blob": [Function],
          "FormData": [Function],
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": "application/x-www-form-urlencoded",
        },
        "maxBodyLength": -1,
        "maxContentLength": -1,
        "method": "post",
        "timeout": 60000,
        "transformRequest": [
          [Function],
        ],
        "transformResponse": [
          [Function],
        ],
        "transitional": {
          "clarifyTimeoutError": false,
          "forcedJSONParsing": true,
          "silentJSONParsing": true,
        },
        "url": "/test/allsettled",
        "validateStatus": [Function],
        "xsrfCookieName": "XSRF-TOKEN",
        "xsrfHeaderName": "X-XSRF-TOKEN",
      },
      "data": "success",
      "headers": {},
      "request": Request {
        "config": {
          "adapter": [Function],
          "cacheResponse": false,
          "cancelToken": CancelToken {
            "promise": Promise {
              "then": [Function],
            },
          },
          "data": undefined,
          "env": {
            "Blob": [Function],
            "FormData": [Function],
          },
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/x-www-form-urlencoded",
          },
          "maxBodyLength": -1,
          "maxContentLength": -1,
          "method": "post",
          "timeout": 60000,
          "transformRequest": [
            [Function],
          ],
          "transformResponse": [
            [Function],
          ],
          "transitional": {
            "clarifyTimeoutError": false,
            "forcedJSONParsing": true,
            "silentJSONParsing": true,
          },
          "url": "/test/allsettled",
          "validateStatus": [Function],
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": "application/x-www-form-urlencoded",
        },
        "reject": [Function],
        "resolve": [Function],
        "responseType": undefined,
        "timeout": 60000,
        "url": "/test/allsettled",
        "withCredentials": false,
      },
      "status": 200,
      "statusText": undefined,
    },
  },
  {
    "status": "fulfilled",
    "value": Response {
      "code": undefined,
      "config": {
        "adapter": [Function],
        "cacheResponse": false,
        "cancelToken": CancelToken {
          "promise": Promise {
            "then": [Function],
          },
        },
        "data": undefined,
        "env": {
          "Blob": [Function],
          "FormData": [Function],
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "maxBodyLength": -1,
        "maxContentLength": -1,
        "method": "get",
        "timeout": 60000,
        "transformRequest": [
          [Function],
        ],
        "transformResponse": [
          [Function],
        ],
        "transitional": {
          "clarifyTimeoutError": false,
          "forcedJSONParsing": true,
          "silentJSONParsing": true,
        },
        "url": "/test/allsettled",
        "validateStatus": [Function],
        "xsrfCookieName": "XSRF-TOKEN",
        "xsrfHeaderName": "X-XSRF-TOKEN",
      },
      "data": "success",
      "headers": {},
      "request": Request {
        "config": {
          "adapter": [Function],
          "cacheResponse": false,
          "cancelToken": CancelToken {
            "promise": Promise {
              "then": [Function],
            },
          },
          "data": undefined,
          "env": {
            "Blob": [Function],
            "FormData": [Function],
          },
          "headers": {
            "Accept": "application/json, text/plain, */*",
          },
          "maxBodyLength": -1,
          "maxContentLength": -1,
          "method": "get",
          "timeout": 60000,
          "transformRequest": [
            [Function],
          ],
          "transformResponse": [
            [Function],
          ],
          "transitional": {
            "clarifyTimeoutError": false,
            "forcedJSONParsing": true,
            "silentJSONParsing": true,
          },
          "url": "/test/allsettled",
          "validateStatus": [Function],
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "reject": [Function],
        "resolve": [Function],
        "responseType": undefined,
        "timeout": 60000,
        "url": "/test/allsettled",
        "withCredentials": false,
      },
      "status": 200,
      "statusText": undefined,
    },
  },
  {
    "status": "fulfilled",
    "value": Response {
      "code": undefined,
      "config": {
        "adapter": [Function],
        "cacheResponse": false,
        "cancelToken": CancelToken {
          "promise": Promise {
            "then": [Function],
          },
        },
        "data": undefined,
        "env": {
          "Blob": [Function],
          "FormData": [Function],
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "maxBodyLength": -1,
        "maxContentLength": -1,
        "method": "get",
        "timeout": 60000,
        "transformRequest": [
          [Function],
        ],
        "transformResponse": [
          [Function],
        ],
        "transitional": {
          "clarifyTimeoutError": false,
          "forcedJSONParsing": true,
          "silentJSONParsing": true,
        },
        "url": "/test/allsettled",
        "validateStatus": [Function],
        "xsrfCookieName": "XSRF-TOKEN",
        "xsrfHeaderName": "X-XSRF-TOKEN",
      },
      "data": "success",
      "headers": {},
      "request": Request {
        "config": {
          "adapter": [Function],
          "cacheResponse": false,
          "cancelToken": CancelToken {
            "promise": Promise {
              "then": [Function],
            },
          },
          "data": undefined,
          "env": {
            "Blob": [Function],
            "FormData": [Function],
          },
          "headers": {
            "Accept": "application/json, text/plain, */*",
          },
          "maxBodyLength": -1,
          "maxContentLength": -1,
          "method": "get",
          "timeout": 60000,
          "transformRequest": [
            [Function],
          ],
          "transformResponse": [
            [Function],
          ],
          "transitional": {
            "clarifyTimeoutError": false,
            "forcedJSONParsing": true,
            "silentJSONParsing": true,
          },
          "url": "/test/allsettled",
          "validateStatus": [Function],
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "reject": [Function],
        "resolve": [Function],
        "responseType": undefined,
        "timeout": 60000,
        "url": "/test/allsettled",
        "withCredentials": false,
      },
      "status": 200,
      "statusText": undefined,
    },
  },
]
`;

exports[`Emulate a service call with a function should allow schema transforming a function call response: transform 1`] = `"lorem.ipsum-function-schema-transform"`;

exports[`Emulate a service call with a function should allow transforming a function call response: transform 1`] = `"lorem.ipsum-function-transform"`;

exports[`Emulate a service call with a function should handle function call response error string with transformations: error transformation 1`] = `
[
  "dolor.sit-error-transform",
]
`;

exports[`Emulate a service call with a function should handle function call response error with transformations: error transformation 1`] = `
[
  "dolor.sit-error-transform",
]
`;

exports[`Emulate a service call with a function should handle function call response errors: error 1`] = `
[
  "dolor.sit",
]
`;

exports[`Poll service calls should handle basic polling error: error 1`] = `
[
  [
    [Error: basic validation error],
  ],
]
`;

exports[`Poll service calls should handle basic polling: basic 1`] = `
{
  "output": {
    "data": "success",
    "pollConfig": {
      "__retryCount": 1,
      "location": {
        "config": undefined,
        "url": "/test/",
      },
      "pollInterval": 1,
      "validate": [Function],
    },
  },
  "validator": [
    {
      "count": -1,
      "success": {
        "data": "success",
        "pollConfig": [Function],
      },
    },
    {
      "count": 0,
      "success": {
        "data": "success",
        "pollConfig": {
          "__retryCount": 0,
          "location": {
            "config": undefined,
            "url": "/test/",
          },
          "pollInterval": 0,
          "validate": [Function],
        },
      },
    },
    {
      "count": 1,
      "success": {
        "data": "success",
        "pollConfig": {
          "__retryCount": 1,
          "location": {
            "config": undefined,
            "url": "/test/",
          },
          "pollInterval": 1,
          "validate": [Function],
        },
      },
    },
  ],
}
`;

exports[`Poll service calls should handle polling against a different service call path but with a callback error: different service call with callback errors 1`] = `
[
  [
    [Error: location string error],
  ],
  [
    [Error: location string error],
  ],
]
`;

exports[`Poll service calls should handle polling against a different service call path error and status callback error: status of a status error 1`] = `
[
  [
    [Error: status error],
  ],
  [
    [Error: status error],
  ],
]
`;

exports[`Poll service calls should handle polling against a different service call path error and status callback error: status of a status error polling 1`] = `
{
  "status": [
    {
      "count": -1,
      "response": {
        "data": undefined,
        "error": undefined,
        "pollConfig": undefined,
      },
    },
    {
      "count": 0,
      "response": {
        "data": undefined,
        "error": true,
        "pollConfig": {
          "__retryCount": 0,
          "location": {
            "config": undefined,
            "url": "/pollError",
          },
          "pollInterval": 0,
          "status": [Function],
          "validate": [Function],
        },
      },
    },
  ],
}
`;

exports[`Poll service calls should handle polling against a different service call path error and status callback: different service call error with status callback 1`] = `
{
  "status": [
    {
      "count": -1,
      "response": {
        "data": undefined,
        "error": undefined,
        "pollConfig": undefined,
      },
    },
    {
      "count": 0,
      "response": {
        "data": undefined,
        "error": true,
        "pollConfig": {
          "__retryCount": 0,
          "location": {
            "config": undefined,
            "url": "/pollError",
          },
          "pollInterval": 0,
          "status": [Function],
          "validate": [Function],
        },
      },
    },
  ],
}
`;

exports[`Poll service calls should handle polling against a different service call path: different service call 1`] = `
{
  "output": {
    "data": "success",
    "pollConfig": {
      "__retryCount": 2,
      "location": [Function],
      "pollInterval": 1,
      "validate": [Function],
    },
  },
  "validator": [
    {
      "count": -1,
      "success": {
        "data": "success",
        "pollConfig": {
          "location": [Function],
          "validate": [Function],
        },
        "url": "/test/",
      },
    },
    {
      "count": 0,
      "success": {
        "data": "success",
        "pollConfig": {
          "__retryCount": 0,
          "location": [Function],
          "pollInterval": 0,
          "validate": [Function],
        },
        "url": "/pollSuccess/",
      },
    },
    {
      "count": 1,
      "success": {
        "data": "success",
        "pollConfig": {
          "__retryCount": 1,
          "location": [Function],
          "pollInterval": 1,
          "validate": [Function],
        },
        "url": "/pollSuccess/",
      },
    },
  ],
}
`;

exports[`Poll service calls should handle polling with a status callback error: callback error 1`] = `
[
  [
    [Error: status error],
  ],
  [
    [Error: status error],
  ],
  [
    [Error: status error],
  ],
  [
    [Error: status error],
  ],
  [
    [Error: status error],
  ],
]
`;

exports[`Poll service calls should handle polling with a status callback: callback 1`] = `
{
  "output": {
    "data": "success",
    "pollConfig": {
      "status": [Function],
      "validate": [Function],
    },
  },
  "status": [
    {
      "count": -1,
      "response": {
        "data": undefined,
        "error": undefined,
        "pollConfig": undefined,
      },
    },
    {
      "count": 0,
      "response": {
        "data": "success",
        "error": false,
        "pollConfig": {
          "__retryCount": 0,
          "location": {
            "config": undefined,
            "url": "/test/",
          },
          "pollInterval": 0,
          "status": [Function],
          "validate": [Function],
        },
      },
    },
    {
      "count": 1,
      "response": {
        "data": "success",
        "error": false,
        "pollConfig": {
          "__retryCount": 1,
          "location": {
            "config": undefined,
            "url": "/test/",
          },
          "pollInterval": 1,
          "status": [Function],
          "validate": [Function],
        },
      },
    },
  ],
}
`;

exports[`Poll service calls should handle polling with a validate callback error: callback error 1`] = `
[
  [
    [Error: status error],
  ],
]
`;

exports[`Poll service calls should handle polling with a validate callback: callback 1`] = `
{
  "output": {
    "data": "success",
    "pollConfig": {
      "__retryCount": 1,
      "location": {
        "config": undefined,
        "url": "/test/",
      },
      "pollInterval": 1,
      "validate": [Function],
    },
  },
  "validator": [
    {
      "count": -1,
      "success": {
        "data": "success",
        "pollConfig": {
          "validate": [Function],
        },
      },
    },
    {
      "count": 0,
      "success": {
        "data": "success",
        "pollConfig": {
          "__retryCount": 0,
          "location": {
            "config": undefined,
            "url": "/test/",
          },
          "pollInterval": 0,
          "validate": [Function],
        },
      },
    },
    {
      "count": 1,
      "success": {
        "data": "success",
        "pollConfig": {
          "__retryCount": 1,
          "location": {
            "config": undefined,
            "url": "/test/",
          },
          "pollInterval": 1,
          "validate": [Function],
        },
      },
    },
  ],
}
`;

exports[`ServiceConfig should handle producing a consistent service call configuration: response config hash 1`] = `"c1336321229"`;

exports[`ServiceConfig should have specific properties and methods: specific props and methods 1`] = `
[
  "axiosServiceCall",
  "globalXhrTimeout",
  "globalPollInterval",
  "globalCancelTokens",
  "globalResponseCache",
]
`;

exports[`Transform service call responses should handle transforming error responses and errors: transformed error 1`] = `
[
  "error-error-transform",
  "error",
]
`;

exports[`Transform service call responses should handle transforming responses with a cancel: transformed cancel 1`] = `
[
  "cancelled request",
  "error-cancel-transform",
]
`;

exports[`Transform service call responses should handle transforming responses with schema transform: schema 1`] = `
[
  "success-schema-transform",
]
`;

exports[`Transform service call responses should handle transforming success responses and errors: transformed success 1`] = `
[
  "success-transform",
  "success",
]
`;
