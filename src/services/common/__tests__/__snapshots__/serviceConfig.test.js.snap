// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ServiceConfig should allow passing a function and emulating a service call: function responses 1`] = `
[
  "lorem.ipsum",
  "lorem.ipsum-function-schema-transform",
  "lorem.ipsum-function-transform",
  undefined,
  "dolor.sit-error-transform",
  "dolor.sit-error-transform",
]
`;

exports[`ServiceConfig should handle caching service calls: cached responses, emulated 304 1`] = `
[
  "1. method=get, status=200, cacheId=e1b4b1a43c3208521c3a660afa80a2ee4ffdad78, desc=initial call",
  "2. method=get, status=304, cacheId=e1b4b1a43c3208521c3a660afa80a2ee4ffdad78, desc=repeat 1st call and config",
  "3. method=get, status=200, cacheId=86a6599810403465b856cc72a9cc9d6bba42d8ee, desc=updated config",
  "4. method=post, status=200, cacheId=null, desc=attempt post method",
  "5. method=get, status=304, cacheId=86a6599810403465b856cc72a9cc9d6bba42d8ee, desc=repeat 3rd call and config",
  "6. method=get, status=200, cacheId=null, desc=no caching",
]
`;

exports[`ServiceConfig should handle cancelling service calls: cancelled request, Promise.all 1`] = `"cancelled request"`;

exports[`ServiceConfig should handle cancelling service calls: cancelled request, Promise.allSettled 1`] = `
[
  {
    "reason": [CanceledError: cancelled request],
    "status": "rejected",
  },
  {
    "reason": [CanceledError: cancelled request],
    "status": "rejected",
  },
  {
    "status": "fulfilled",
    "value": Response {
      "code": undefined,
      "config": {
        "adapter": [Function],
        "cacheResponse": false,
        "cancelToken": CancelToken {
          "promise": Promise {
            "then": [Function],
          },
        },
        "data": undefined,
        "env": {
          "FormData": [Function],
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": "application/x-www-form-urlencoded",
        },
        "maxBodyLength": -1,
        "maxContentLength": -1,
        "method": "post",
        "timeout": 60000,
        "transformRequest": [
          [Function],
        ],
        "transformResponse": [
          [Function],
        ],
        "transitional": {
          "clarifyTimeoutError": false,
          "forcedJSONParsing": true,
          "silentJSONParsing": true,
        },
        "url": "/test/allsettled",
        "validateStatus": [Function],
        "xsrfCookieName": "XSRF-TOKEN",
        "xsrfHeaderName": "X-XSRF-TOKEN",
      },
      "data": "success",
      "headers": undefined,
      "request": Request {
        "config": {
          "adapter": [Function],
          "cacheResponse": false,
          "cancelToken": CancelToken {
            "promise": Promise {
              "then": [Function],
            },
          },
          "data": undefined,
          "env": {
            "FormData": [Function],
          },
          "headers": {
            "Accept": "application/json, text/plain, */*",
            "Content-Type": "application/x-www-form-urlencoded",
          },
          "maxBodyLength": -1,
          "maxContentLength": -1,
          "method": "post",
          "timeout": 60000,
          "transformRequest": [
            [Function],
          ],
          "transformResponse": [
            [Function],
          ],
          "transitional": {
            "clarifyTimeoutError": false,
            "forcedJSONParsing": true,
            "silentJSONParsing": true,
          },
          "url": "/test/allsettled",
          "validateStatus": [Function],
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": "application/x-www-form-urlencoded",
        },
        "reject": [Function],
        "resolve": [Function],
        "responseType": undefined,
        "timeout": 60000,
        "url": "/test/allsettled",
        "withCredentials": false,
      },
      "status": 200,
      "statusText": undefined,
    },
  },
  {
    "status": "fulfilled",
    "value": Response {
      "code": undefined,
      "config": {
        "adapter": [Function],
        "cacheResponse": false,
        "cancelToken": CancelToken {
          "promise": Promise {
            "then": [Function],
          },
        },
        "data": undefined,
        "env": {
          "FormData": [Function],
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "maxBodyLength": -1,
        "maxContentLength": -1,
        "method": "get",
        "timeout": 60000,
        "transformRequest": [
          [Function],
        ],
        "transformResponse": [
          [Function],
        ],
        "transitional": {
          "clarifyTimeoutError": false,
          "forcedJSONParsing": true,
          "silentJSONParsing": true,
        },
        "url": "/test/allsettled",
        "validateStatus": [Function],
        "xsrfCookieName": "XSRF-TOKEN",
        "xsrfHeaderName": "X-XSRF-TOKEN",
      },
      "data": "success",
      "headers": undefined,
      "request": Request {
        "config": {
          "adapter": [Function],
          "cacheResponse": false,
          "cancelToken": CancelToken {
            "promise": Promise {
              "then": [Function],
            },
          },
          "data": undefined,
          "env": {
            "FormData": [Function],
          },
          "headers": {
            "Accept": "application/json, text/plain, */*",
          },
          "maxBodyLength": -1,
          "maxContentLength": -1,
          "method": "get",
          "timeout": 60000,
          "transformRequest": [
            [Function],
          ],
          "transformResponse": [
            [Function],
          ],
          "transitional": {
            "clarifyTimeoutError": false,
            "forcedJSONParsing": true,
            "silentJSONParsing": true,
          },
          "url": "/test/allsettled",
          "validateStatus": [Function],
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "reject": [Function],
        "resolve": [Function],
        "responseType": undefined,
        "timeout": 60000,
        "url": "/test/allsettled",
        "withCredentials": false,
      },
      "status": 200,
      "statusText": undefined,
    },
  },
  {
    "status": "fulfilled",
    "value": Response {
      "code": undefined,
      "config": {
        "adapter": [Function],
        "cacheResponse": false,
        "cancelToken": CancelToken {
          "promise": Promise {
            "then": [Function],
          },
        },
        "data": undefined,
        "env": {
          "FormData": [Function],
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "maxBodyLength": -1,
        "maxContentLength": -1,
        "method": "get",
        "timeout": 60000,
        "transformRequest": [
          [Function],
        ],
        "transformResponse": [
          [Function],
        ],
        "transitional": {
          "clarifyTimeoutError": false,
          "forcedJSONParsing": true,
          "silentJSONParsing": true,
        },
        "url": "/test/allsettled",
        "validateStatus": [Function],
        "xsrfCookieName": "XSRF-TOKEN",
        "xsrfHeaderName": "X-XSRF-TOKEN",
      },
      "data": "success",
      "headers": undefined,
      "request": Request {
        "config": {
          "adapter": [Function],
          "cacheResponse": false,
          "cancelToken": CancelToken {
            "promise": Promise {
              "then": [Function],
            },
          },
          "data": undefined,
          "env": {
            "FormData": [Function],
          },
          "headers": {
            "Accept": "application/json, text/plain, */*",
          },
          "maxBodyLength": -1,
          "maxContentLength": -1,
          "method": "get",
          "timeout": 60000,
          "transformRequest": [
            [Function],
          ],
          "transformResponse": [
            [Function],
          ],
          "transitional": {
            "clarifyTimeoutError": false,
            "forcedJSONParsing": true,
            "silentJSONParsing": true,
          },
          "url": "/test/allsettled",
          "validateStatus": [Function],
          "xsrfCookieName": "XSRF-TOKEN",
          "xsrfHeaderName": "X-XSRF-TOKEN",
        },
        "headers": {
          "Accept": "application/json, text/plain, */*",
        },
        "reject": [Function],
        "resolve": [Function],
        "responseType": undefined,
        "timeout": 60000,
        "url": "/test/allsettled",
        "withCredentials": false,
      },
      "status": 200,
      "statusText": undefined,
    },
  },
]
`;

exports[`ServiceConfig should handle producing a service call configuration: response configs 1`] = `
[
  "{
  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },
  adapter: function mockAdapter(config) {\\n\\t  return new Promise(function (resolve, reject) {\\n\\t    var request = new Request(resolve, reject, config);\\n\\t    moxios.requests.track(request);\\n\\t\\n\\t    // Check for matching stub to auto respond with\\n\\t    for (var i = 0, l = moxios.stubs.count(); i < l; i++) {\\n\\t      var stub = moxios.stubs.at(i);\\n\\t      var correctURL = stub.url instanceof RegExp ? stub.url.test(request.url) : stub.url === request.url;\\n\\t      var correctMethod = true;\\n\\t\\n\\t      if (stub.method !== undefined) {\\n\\t        correctMethod = stub.method.toLowerCase() === request.config.method.toLowerCase();\\n\\t      }\\n\\t\\n\\t      if (correctURL && correctMethod) {\\n\\t        if (stub.timeout) {\\n\\t          throwTimeout(config);\\n\\t        }\\n\\t        request.respondWith(stub.response);\\n\\t        stub.resolve();\\n\\t        break;\\n\\t      }\\n\\t    }\\n\\t  });\\n\\t},
  transformRequest: [
    function transformRequest(data, headers) {\\n    normalizeHeaderName(headers, 'Accept');\\n    normalizeHeaderName(headers, 'Content-Type');\\n\\n    if (utils.isFormData(data) ||\\n      utils.isArrayBuffer(data) ||\\n      utils.isBuffer(data) ||\\n      utils.isStream(data) ||\\n      utils.isFile(data) ||\\n      utils.isBlob(data)\\n    ) {\\n      return data;\\n    }\\n    if (utils.isArrayBufferView(data)) {\\n      return data.buffer;\\n    }\\n    if (utils.isURLSearchParams(data)) {\\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\\n      return data.toString();\\n    }\\n\\n    var isObjectPayload = utils.isObject(data);\\n    var contentType = headers && headers['Content-Type'];\\n\\n    var isFileList;\\n\\n    if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {\\n      var _FormData = this.env && this.env.FormData;\\n      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());\\n    } else if (isObjectPayload || contentType === 'application/json') {\\n      setContentTypeIfUnset(headers, 'application/json');\\n      return stringifySafely(data);\\n    }\\n\\n    return data;\\n  }
  ],
  transformResponse: [
    function transformResponse(data) {\\n    var transitional = this.transitional || defaults.transitional;\\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\\n\\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\\n      try {\\n        return JSON.parse(data);\\n      } catch (e) {\\n        if (strictJSONParsing) {\\n          if (e.name === 'SyntaxError') {\\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\\n          }\\n          throw e;\\n        }\\n      }\\n    }\\n\\n    return data;\\n  }
  ],
  timeout: 60000,
  xsrfCookieName: XSRF-TOKEN,
  xsrfHeaderName: X-XSRF-TOKEN,
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: function FormData(options) {\\n  if (!(this instanceof FormData)) {\\n    return new FormData(options);\\n  }\\n\\n  this._overheadLength = 0;\\n  this._valueLength = 0;\\n  this._valuesToMeasure = [];\\n\\n  CombinedStream.call(this);\\n\\n  options = options || {};\\n  for (var option in options) {\\n    this[option] = options[option];\\n  }\\n}
  },
  validateStatus: function validateStatus(status) {\\n    return status >= 200 && status < 300;\\n  },
  headers: {
    Accept: application/json, text/plain, */*
  },
  exposeCacheId: true,
  url: /test/,
  params: {
    lorem: ipsum,
    dolor: sit
  },
  schema: [
    successResponse => \`\${successResponse}-schema-transform\`
  ],
  transform: [
    successResponse => \`\${successResponse}-transform\`
  ],
  cacheResponse: false,
  method: get,
  cacheId: null
}",
]
`;

exports[`ServiceConfig should handle transforming service call responses: transformed responses 1`] = `
[
  "success-schema-transform",
  "success-transform",
  "error-error-transform",
  [
    "cancelled request",
    undefined,
  ],
]
`;

exports[`ServiceConfig should have specific properties and methods: specific props and methods 1`] = `
[
  "axiosServiceCall",
  "globalXhrTimeout",
  "globalCancelTokens",
  "globalResponseCache",
]
`;
